Script started on Mon 01 Oct 2018 10:56:05 PM EDT
llw5@gold15:~/cs112/proj03$ ls
application.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
application.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug		 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
llw5@gold15:~/cs112/proj03$ cat application.cpp tester.cpp vec.h vect Test1.txt Ve ct Tester, .cpp application.h VecStreamOut.txt VectT  Test2Copy.txt VEct   ecTester.h Vec.cpp  vecTest1Cop.txt vecTEst   est2.txt
/* Purpose: This creates an application allowing the user to create a vector with certain values and add those vectors
 * application.cpp
 * Lorrayya Williams
 *  Created on: Oct 1, 2018
 *      Author: llw5
 */

#include "application.h"
#include "Vec.h"
#include <iostream>
#include <string>
#include <cstdlib>
using namespace std;

application::application(){

}

void application::interface(){
	//intializes variables of Dimension size and Vectors
	unsigned numDim;
	unsigned numVecs;

	//Allows user to input the Dimension size
	cout << "Enter the number of dimensions in your space: ";
	cin >> numDim;

	//intializes a vector with the Starting positions
	Vec startPos(numDim);

	//intializes vector with the Sum
	Vec vecSum(numDim);

	string currentNum;

	//The user enters the starting points for the vectors
	for (unsigned i = 0; i < numDim; i++) {
		cout << "Enter starting position " << i + 1 << " in that space: ";
		cin >> currentNum;
		startPos[i] = atof(currentNum.c_str());
	}

	//Outputs Starting positions
	for (unsigned i = 0; i < numDim; i++) {
		cout << startPos[i] << '\t';
	}

	//Allows the user to enter the number of vectors
	cout << "Enter the number of vectors in that space: ";
	cin >> numVecs;


	Vec currentVec(numDim);
	vecSum = vecSum + startPos;

	// The user adds values to the vector in each dimension
	for(unsigned i = 0; i < numVecs; i++){
		for(unsigned j = 0; j < numDim; j++){
			cout << "Enter position " << j + 1 << " in that space"
					<< " for vector v" << i + 1 << ": ";
			cin >> currentNum;
			currentVec[j] = atof(currentNum.c_str());
		}

		vecSum = currentVec + vecSum;
	}


	//prints the starting positions
	for (unsigned i = 0; i < numDim; i++) {
		cout << startPos[i] << '\t';
	}

	//prints sum of vectors
	cout << "Sum of Vectors";
	for(unsigned i =0; i< numDim -1; ++i){
		cout << vecSum[i] << " , ";
	}
	cout << vecSum[numDim -1] << ">" << flush;

}
/* tester.cpp drives the testing of our Vec class.
 * Student:
 * Date:
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "application.h"

int main() {
	VecTester vt;
	vt.runTests();
	application a;
	a.interface();
}
cat: vec.h: No such file or directory
3
1
2
3

/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Lorrayya Williams
 * Date: October 1, 2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testSubscript();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void testConstSubscript(const Vec& v) {
	assert( v[0] == 11 );
	assert( v[1] == 22 );
	assert( v[2] == 33 );
}

void VecTester::testSubscript() const {
	cout << "Testing subscript... " << flush;
//	// empty case
//	Vec v0;
//	try {
//		v0[0];
//		cerr << "Subscript worked on empty Vec";
//		exit(1);
//	} catch (const range_error& re) {
//		cout << " 0 " << flush;
//	}
	// non-empty case, write version
	Vec v1(3);
	v1[0] = 11;
	v1[1] = 22;
	v1[2] = 33;
	assert( v1.getItem(0) == 11 );
	assert( v1.getItem(1) == 22 );
	assert( v1.getItem(2) == 33 );
	cout << " 1 " << flush;
	// non-empty case, read version
//	testConstSubscript(v1);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
	*  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
	//assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

/* Purpose: This creates an application allowing the user to create a vector with certain values and add those vectors
 * application.h
 *Lorrayya Williams
 *  Created on: Oct 1, 2018
 *      Author: llw5
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_
#include "Vec.h"
//using namespace std;

class application {
	public:
	application();
	void interface();
};


#endif /* APPLICATION_H_ */
cat: VecStreamOut.txt: No such file or directory
cat: VecTest2Copy.txt: No such file or directory
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Lorrayya Williams
 * Date: October
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testSubscript() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name:Lorrayya Williams
 * Date: October 1, 2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "Vec.h"
#include <cstdlib>
#include <fstream>
#include <cassert>

// Intializes Array with Null values
Vec::Vec() {
	myArray = NULL;
	mySize = 0;
}


//Intializes Array with an inputed value
Vec::Vec(unsigned size) {
		mySize = size;
	if (size> 0){
		myArray = new double[mySize];
	}
	else{
		myArray = NULL;
	}
	for(unsigned i=0; i < size; ++i){
		myArray[i]=0;
	}
}


//Changes the size of an array
Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if (original.mySize > 0){
		myArray = new Item[mySize];
		for (unsigned i = 0; i< mySize; ++i) {
			myArray[i] = original.myArray[i];
		}
	}
	else {
		mySize = 0;
		myArray = NULL;
	}
   }

//Destroys Array
Vec::~Vec() {
	delete []myArray;
	mySize = 0;
	myArray = NULL;
}

//Allows operator to compare te size of vectors
Vec& Vec::operator=(const Vec& original) {
	if (this != &original) {
		if (mySize != original.mySize) {
			if (mySize > 0) {
				delete []myArray;
				myArray = NULL;
			}
			if (original.mySize > 0) {
				myArray = new Item[original.mySize];
			}
			mySize = original.mySize;
		}
		for (unsigned i = 0; i < mySize; ++i) {
			myArray[i] = original.myArray[i];
		}
	}
	return *this;
}

//Accessor for Vector Size
unsigned Vec::getSize() const {
	return mySize;
}

//Sets item of an array to a certain value
void Vec::setItem(unsigned index, const Item& it){
	if (myArray == NULL){
		throw range_error("myArray is empty");
	}
	if(index > mySize - 1){
		throw range_error("Index Out of Bounds");
	}
	else{
		myArray[index] = it;
	}
}

//Accessor for Item
Item Vec::getItem(unsigned index) const {
	if (myArray == NULL){
		throw range_error("myArray is empty");
	}
	if(index > mySize - 1){
		throw range_error("Index Out of Bounds");
	}
	else{
		return myArray[index];
	}
}


//Sets the Sixe of the Vector
void Vec::setSize(unsigned newSize){
	if (mySize != newSize){
		if (newSize == 0){
			delete []myArray;
			myArray = NULL;
			mySize = 0;
		}
		else{
			newArray = new Item[newSize];
			if (mySize < newSize){
				for(unsigned i= 0; i < mySize; ++i){
					newArray[i] = myArray[i];
				}
				for(unsigned i =mySize; i < newSize; ++i) {
					newArray[i]= 0;
				}
			}
			else{
				for(unsigned i = 0; i < newSize ; ++i){
					newArray[i]= myArray[i];
				}
			}
			mySize = newSize;
			delete []myArray;
			myArray = newArray;
		}

	}
}

//Allows for expression to compar the size of vectors
bool Vec::operator==(const Vec& v2){
	if (mySize != v2.mySize){
		return false;
	}
	for(unsigned i =0; i < mySize; ++i){
		if(myArray[i] != v2.myArray[i]){
			return false;
		}
	}
	return true;

}

//Writes Value to a Vector
void Vec::writeTo(ostream& out) const{
	for(unsigned i; i < mySize; ++i){
		out << myArray[i] << '\t';
	}


}

//Reads Values in a Vector
void Vec::readFrom(istream& in){
	for(unsigned i = 0; i < mySize; i++){
			in >> myArray[i];
	}
}

//reads vectors stored in a file
void Vec::readFrom(string filename) {
	ifstream fin(filename.c_str());
	assert(fin.is_open());
	delete[] myArray;
	fin >> mySize;
	myArray = new Item[mySize];
	for(unsigned i = 0; i < mySize; i++){
		fin >> myArray[i];
	}
	fin.close();
}

//Writes vectors to a File
void Vec::writeTo(const string& fileName){
		ofstream myFile;
		myFile.open(fileName.c_str());

		double numValues = mySize;
		myFile << numValues << endl;

		for(unsigned i = 0; i < mySize; ++i){
			myFile << myArray[i] << endl;

		}
		myFile.close();
}

/* Subscript operator (read version)
 * Gets the value at a given index in myArray
 * @param: index, an unsigned
 * Return: myArray[index], an Item (aka double)
 * Written by: Zachary Chin
 */
const Item& Vec::operator[](unsigned index) const{
	if (index >= mySize) {
		throw range_error("index out of bounds of array's size");
	} else {
		return myArray[index];
	}
}

//Allows for the operator to be used for writing to a Vector
Item& Vec::operator[](unsigned index) {
	if(index >= mySize){
		throw range_error("The Index is too high!");
	}
	else{
		return myArray[index];
	}
}

/* Inequality operator
 * Compares two Vec objects to see if they are equal
 * @param: v2, a Vec object
 * Return: true if the two Vec objects have the same size and the
 * 		   same values in corresponding indexes; return false otherwise.
 * Written by: Zachary Chin
 */
bool Vec::operator!=(const Vec& v2){
	if (mySize != v2.mySize) {
		return true;
	} else {
		for (unsigned i = 0; i < mySize; i++) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
	}
	return false;
}


//Allows for vectors to be added
Vec Vec::operator+(const Vec& other){
	if(mySize == other.mySize){
		Vec vec3(mySize);
		for (unsigned i= 0; i < mySize; i++){
			vec3.setItem(i, myArray[i] + other.myArray[i]);
		}
		return vec3;
	} else {
		throw invalid_argument("size is unequal");
	}



}

/* Subtraction operator
 * Subtracts the values in the array of the current Vec object by the
 *    values in the corresponding indexes in the Vec object passed
 * @param: v2, a Vec object
 * Return: v3, a Vec object, which contains the differences of values
 * 		   between the current Vec object and v2
 * Written by: Zachary Chin
 */
Vec Vec::operator-(const Vec& v2){
	if(mySize != v2.mySize){
		throw invalid_argument("Arrays are not of equal size");
	}
	else{
		Vec v3(v2.getSize());
		for(unsigned i = 0; i < mySize; i++){
			v3[i] = myArray[i] - v2[i];
		}

		return v3;
	}
}

//Allows for vectors t be multiplied
double Vec::operator*(const Vec& other) const{
	if (mySize == other.mySize){
		Vec vec3(mySize);
		for (unsigned i=0; i < mySize; ++i){
			vec3.setItem(i, myArray[i] * other.myArray[i]);
		}
		double product = 0;
		for(unsigned i=0; i < vec3.mySize; ++i) {
			product += vec3.myArray[i];
		}
		return product;
	}else {
		throw invalid_argument("size is unequal");
	}
}





cat: vecTest1Cop.txt: No such file or directory
4
2
4
6
8

llw5@gold15:~/cs112/proj03$ cat vecTest1Copy.txt
3
1
2
3
llw5@gold15:~/cs112/proj03$ cd Debug
llw5@gold15:~/cs112/proj03/Debug$ ls
application.d  Application.o  proj03	  tester.d  Vec.o
Application.d  makefile       sources.mk  tester.o  VecTester.d
application.o  objects.mk     subdir.mk   Vec.d     VecTester.o
llw5@gold15:~/cs112/proj03/Debug$ make all
make: Nothing to be done for 'all'.
llw5@gold15:~/cs112/proj03/Debug$ cd ..
llw5@gold15:~/cs112/proj03$ ./Debug/proj03
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing subscript...  1  2  Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!
Enter the number of dimensions in your space: 3
Enter starting position 1 in that space: 1
Enter starting position 2 in that space: 1
Enter starting position 3 in that space: 1
1	1	1	Enter the number of vectors in that space: 4
Enter position 1 in that space for vector v1: 1
Enter position 2 in that space for vector v1: 1
Enter position 3 in that space for vector v1: 1
Enter position 1 in that space for vector v2: 1
Enter position 2 in that space for vector v2: 1
Enter position 3 in that space for vector v2: 1
Enter position 1 in that space for vector v3: 1
Enter position 2 in that space for vector v3: 1
Enter position 3 in that space for vector v3: 1
Enter position 1 in that space for vector v4: 1
Enter position 2 in that space for vector v4: 1
Enter position 3 in that space for vector v4: 3
1	1	1	Sum of Vectors5 , 5 , 7>llw5@gold15:~/cs112/proj03$ ^C
llw5@gold15:~/cs112/proj03$ exit

Script done on Mon 01 Oct 2018 11:00:10 PM EDT
